// Package contracts provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package contracts

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for ErrorCode.
const (
	ERRACCESSDENIED       ErrorCode = "ERR_ACCESS_DENIED"
	ERRALREADYEXISTS      ErrorCode = "ERR_ALREADY_EXISTS"
	ERRALREADYVERIFIED    ErrorCode = "ERR_ALREADY_VERIFIED"
	ERRAUTHCODEINVALID    ErrorCode = "ERR_AUTH_CODE_INVALID"
	ERRCONTACTSUPPORT     ErrorCode = "ERR_CONTACT_SUPPORT"
	ERRINSUFFICIENTFUNDS  ErrorCode = "ERR_INSUFFICIENT_FUNDS"
	ERRINTERNAL           ErrorCode = "ERR_INTERNAL"
	ERRINVALIDARG         ErrorCode = "ERR_INVALID_ARG"
	ERRINVALIDCREDENTIALS ErrorCode = "ERR_INVALID_CREDENTIALS"
	ERRNOTFOUND           ErrorCode = "ERR_NOT_FOUND"
	ERRSELFTRANSFER       ErrorCode = "ERR_SELF_TRANSFER"
	ERRWEAKPASSWORD       ErrorCode = "ERR_WEAK_PASSWORD"
)

// Defines values for Order.
const (
	ASC  Order = "ASC"
	DESC Order = "DESC"
)

// Defines values for UserRole.
const (
	ADMIN    UserRole = "ADMIN"
	BUYER    UserRole = "BUYER"
	TEAMLEAD UserRole = "TEAM_LEAD"
)

// Defines values for UserSortField.
const (
	FULLNAME UserSortField = "FULL_NAME"
)

// Defines values for UserStatus.
const (
	ACTIVE  UserStatus = "ACTIVE"
	DELETED UserStatus = "DELETED"
	FROZEN  UserStatus = "FROZEN"
	PENDING UserStatus = "PENDING"
)

// AuthRequestPayload Request payload for user authentication
type AuthRequestPayload struct {
	// Email Email address
	Email Email `json:"email"`

	// IsRememberMe Extend token expiration
	IsRememberMe *bool `json:"isRememberMe,omitempty"`

	// Password Password (minimum 8 characters)
	Password Password `json:"password"`
}

// AuthTokenRefreshRequestPayload Request payload for refreshing authentication tokens
type AuthTokenRefreshRequestPayload struct {
	// RefreshToken JWT refresh token
	RefreshToken string `json:"refreshToken"`
}

// AvatarUrl User avatar URL
type AvatarUrl = string

// Email Email address
type Email = openapi_types.Email

// Error Error response payload.
type Error struct {
	// Code - ERR_ACCESS_DENIED: Access denied. Usually that error can occur when the user is not authorized to perform the operation (e.g. buyer tries to remove admin or buyer tries to add a new user). Mostly theoretical error.
	// - ERR_ALREADY_EXISTS: The record already exists in the system. Usually that error can occur during adding users, that were already added to the system.
	// - ERR_ALREADY_VERIFIED: The request was already verified. Usually that error can occur during verification of the code, that was already verified.
	// - ERR_AUTH_CODE_INVALID: The provided auth code is invalid. Usually that error can occur during verification of the auth code, that is invalid.
	// - ERR_INSUFFICIENT_FUNDS: Insufficient funds. Usually that error can occur during moving (transferring, withdrawing) funds from the account or card, when the source doesn't have enough of funds.
	// - ERR_INTERNAL: Internal server error. Usually that error indicates some general internal server error, that has nothing to do with client's data, so it can be used with 500 http code.
	// - ERR_INVALID_ARG: Invalid argument(s) was (were) provided during the request. Usually that error can occur when one or more arguments (or their combination) were provided in incorrect format or the operation with the given arguments is prohibited (e.g. you can't delete the general account). Usually that error could be eliminated by calling another endpoint in advance, that provides correct values (or options) to call the former endpoint.
	// - ERR_INVALID_CREDENTIALS: Invalid credentials were provided during the request. Usually that error can occur during providing invalid password and/or email.
	// - ERR_NOT_FOUND: The resource was not found. Usually that error can occur during requesting the resource, that was already removed and can't be accessed anymore (e.g. requesting deleted transaction/user/account information).
	// - ERR_WEAK_PASSWORD: Weak password. Usually that error can occur during providing too weak password for sign up or update password processes. That error should not be the case for web clients, since the password weakness is validated on the FE, so if you encountered that error, probably the FE and the BE are not aligned properly with each other.
	// - ERR_CONTACT_SUPPORT: Some error occurred that needs to be escalated to support. That might signal that liquidity is low.
	// - ERR_SELF_TRANSFER: It is not allowed to transfer funds from an account to itself.
	Code ErrorCode `json:"code"`

	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Message Human-readable error message
	Message *string `json:"message,omitempty"`

	// Timestamp Error occurrence timestamp
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// ErrorCode - ERR_ACCESS_DENIED: Access denied. Usually that error can occur when the user is not authorized to perform the operation (e.g. buyer tries to remove admin or buyer tries to add a new user). Mostly theoretical error.
// - ERR_ALREADY_EXISTS: The record already exists in the system. Usually that error can occur during adding users, that were already added to the system.
// - ERR_ALREADY_VERIFIED: The request was already verified. Usually that error can occur during verification of the code, that was already verified.
// - ERR_AUTH_CODE_INVALID: The provided auth code is invalid. Usually that error can occur during verification of the auth code, that is invalid.
// - ERR_INSUFFICIENT_FUNDS: Insufficient funds. Usually that error can occur during moving (transferring, withdrawing) funds from the account or card, when the source doesn't have enough of funds.
// - ERR_INTERNAL: Internal server error. Usually that error indicates some general internal server error, that has nothing to do with client's data, so it can be used with 500 http code.
// - ERR_INVALID_ARG: Invalid argument(s) was (were) provided during the request. Usually that error can occur when one or more arguments (or their combination) were provided in incorrect format or the operation with the given arguments is prohibited (e.g. you can't delete the general account). Usually that error could be eliminated by calling another endpoint in advance, that provides correct values (or options) to call the former endpoint.
// - ERR_INVALID_CREDENTIALS: Invalid credentials were provided during the request. Usually that error can occur during providing invalid password and/or email.
// - ERR_NOT_FOUND: The resource was not found. Usually that error can occur during requesting the resource, that was already removed and can't be accessed anymore (e.g. requesting deleted transaction/user/account information).
// - ERR_WEAK_PASSWORD: Weak password. Usually that error can occur during providing too weak password for sign up or update password processes. That error should not be the case for web clients, since the password weakness is validated on the FE, so if you encountered that error, probably the FE and the BE are not aligned properly with each other.
// - ERR_CONTACT_SUPPORT: Some error occurred that needs to be escalated to support. That might signal that liquidity is low.
// - ERR_SELF_TRANSFER: It is not allowed to transfer funds from an account to itself.
type ErrorCode string

// Id Unique identifier
type Id = openapi_types.UUID

// Limit Limit of records count to return.
type Limit = int

// Name Name (either first name or last name) of the user.
type Name = string

// Order Enum for sorting order.
type Order string

// OrderBy Order of sorting (ascending/descending). `sortBy` and `orderBy` arrays have always the same length, and each element or `sortBy` array corresponds to the appropriate element of `orderBy` array.
type OrderBy = []Order

// PaginationMeta Pagination metadata for list responses
type PaginationMeta struct {
	// Limit Number of items per page
	Limit int `json:"limit"`

	// Offset Offset of records to skip
	Offset int `json:"offset"`

	// Total Total number of items
	Total int `json:"total"`
}

// PaginationOffset Offset of records to skip.
type PaginationOffset = int

// Password Password (minimum 8 characters)
type Password = string

// RegisterRequestPayload Request payload for user registration
type RegisterRequestPayload struct {
	// Email Email address
	Email Email `json:"email"`

	// FirstName Name (either first name or last name) of the user.
	FirstName Name `json:"firstName"`

	// LastName Name (either first name or last name) of the user.
	LastName Name `json:"lastName"`

	// Password Password (minimum 8 characters)
	Password Password `json:"password"`
}

// TokenResponse Authentication token response
type TokenResponse struct {
	// AccessToken JWT access token
	AccessToken string `json:"accessToken"`

	// AccessTokenExpiresInSeconds Access token expiration time in seconds
	AccessTokenExpiresInSeconds int `json:"accessTokenExpiresInSeconds"`

	// RefreshToken JWT refresh token
	RefreshToken string `json:"refreshToken"`

	// RefreshTokenExpiresInSeconds Refresh token expiration time in seconds
	RefreshTokenExpiresInSeconds int `json:"refreshTokenExpiresInSeconds"`
}

// User User entity representing a system user
type User struct {
	// AvatarUrl User avatar URL
	AvatarUrl *AvatarUrl `json:"avatarUrl"`

	// CreatedAt Creation timestamp
	CreatedAt time.Time `json:"createdAt"`

	// Email Email address
	Email Email `json:"email"`

	// FirstName Name (either first name or last name) of the user.
	FirstName Name `json:"firstName"`

	// Id Unique identifier
	Id Id `json:"id"`

	// LastLoginAt Last login timestamp
	LastLoginAt *time.Time `json:"lastLoginAt"`

	// LastName Name (either first name or last name) of the user.
	LastName Name `json:"lastName"`

	// Role Profile role.
	Role UserRole `json:"role"`

	// Status User status.
	// - ACTIVE: The user is currently active and operational.
	// - PENDING: User has been invited but not yet activated by the user.
	// - FROZEN: The user is inactive and not available for transactions.
	// - DELETED: The user has been deleted and is no longer active.
	Status UserStatus `json:"status"`

	// UpdatedAt Last update timestamp
	UpdatedAt time.Time `json:"updatedAt"`
}

// UserCreateRequest Request payload for creating a new user
type UserCreateRequest struct {
	// Email Email address
	Email Email `json:"email"`

	// FirstName Name (either first name or last name) of the user.
	FirstName Name `json:"firstName"`

	// LastName Name (either first name or last name) of the user.
	LastName Name `json:"lastName"`

	// Password Password (minimum 8 characters)
	Password Password `json:"password"`

	// Role Profile role.
	Role *UserRole `json:"role,omitempty"`

	// Status User status.
	// - ACTIVE: The user is currently active and operational.
	// - PENDING: User has been invited but not yet activated by the user.
	// - FROZEN: The user is inactive and not available for transactions.
	// - DELETED: The user has been deleted and is no longer active.
	Status *UserStatus `json:"status,omitempty"`
}

// UserRole Profile role.
type UserRole string

// UserSortField Enum defining the fields by which user can sort the users list.
type UserSortField string

// UserStatus User status.
// - ACTIVE: The user is currently active and operational.
// - PENDING: User has been invited but not yet activated by the user.
// - FROZEN: The user is inactive and not available for transactions.
// - DELETED: The user has been deleted and is no longer active.
type UserStatus string

// UserUpdateEmailRequest Request payload for updating user email
type UserUpdateEmailRequest struct {
	// NewEmail Email address
	NewEmail Email `json:"newEmail"`

	// Password Password (minimum 8 characters)
	Password Password `json:"password"`
}

// UserUpdateRequest Request payload for updating user information
type UserUpdateRequest struct {
	// AvatarUrl User avatar URL
	AvatarUrl *AvatarUrl `json:"avatarUrl"`

	// FirstName Name (either first name or last name) of the user.
	FirstName *Name `json:"firstName,omitempty"`

	// LastName Name (either first name or last name) of the user.
	LastName *Name `json:"lastName,omitempty"`

	// Role Profile role.
	Role *UserRole `json:"role,omitempty"`

	// Status User status.
	// - ACTIVE: The user is currently active and operational.
	// - PENDING: User has been invited but not yet activated by the user.
	// - FROZEN: The user is inactive and not available for transactions.
	// - DELETED: The user has been deleted and is no longer active.
	Status *UserStatus `json:"status,omitempty"`
}

// UserId defines model for UserId.
type UserId = openapi_types.UUID

// UsersRequestPayload Users request payload.
type UsersRequestPayload struct {
	// Filter Filter criteria for selecting records.
	Filter *struct {
		// Roles Filter by user roles.
		Roles *[]UserRole `json:"roles,omitempty"`

		// Statuses Filter by user statuses.
		Statuses *[]UserStatus `json:"statuses,omitempty"`

		// Text Full text search.
		Text *string `json:"text,omitempty"`
	} `json:"filter,omitempty"`

	// Limit Limit of records count to return.
	Limit Limit `json:"limit"`

	// Offset Offset of records to skip.
	Offset PaginationOffset `json:"offset"`

	// OrderBy Order of sorting (ascending/descending). `sortBy` and `orderBy` arrays have always the same length, and each element or `sortBy` array corresponds to the appropriate element of `orderBy` array.
	OrderBy *OrderBy `json:"orderBy,omitempty"`

	// SortBy Fields to sort the results by.
	SortBy *[]UserSortField `json:"sortBy,omitempty"`
}

// GetUserListParams defines parameters for GetUserList.
type GetUserListParams struct {
	// UsersRequestPayload Filter, sort and pagination query to fetch records.
	UsersRequestPayload UsersRequestPayload `form:"UsersRequestPayload" json:"UsersRequestPayload"`
}

// AuthenticateUserJSONRequestBody defines body for AuthenticateUser for application/json ContentType.
type AuthenticateUserJSONRequestBody = AuthRequestPayload

// RefreshTokensJSONRequestBody defines body for RefreshTokens for application/json ContentType.
type RefreshTokensJSONRequestBody = AuthTokenRefreshRequestPayload

// RegisterUserJSONRequestBody defines body for RegisterUser for application/json ContentType.
type RegisterUserJSONRequestBody = RegisterRequestPayload

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody = UserCreateRequest

// UpdateUserByIdJSONRequestBody defines body for UpdateUserById for application/json ContentType.
type UpdateUserByIdJSONRequestBody = UserUpdateRequest

// UpdateUserEmailJSONRequestBody defines body for UpdateUserEmail for application/json ContentType.
type UpdateUserEmailJSONRequestBody = UserUpdateEmailRequest
