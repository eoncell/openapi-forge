// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetHealthStatusData, GetHealthStatusResponses, GetHealthStatusErrors, AuthenticateUserData, AuthenticateUserResponses, AuthenticateUserErrors, RegisterUserData, RegisterUserResponses, RegisterUserErrors, RefreshTokensData, RefreshTokensResponses, RefreshTokensErrors, LogoutUserData, LogoutUserResponses, LogoutUserErrors, GetUserListData, GetUserListResponses, GetUserListErrors, CreateUserData, CreateUserResponses, CreateUserErrors, DeleteUserByIdData, DeleteUserByIdResponses, DeleteUserByIdErrors, GetUserByIdData, GetUserByIdResponses, GetUserByIdErrors, UpdateUserByIdData, UpdateUserByIdResponses, UpdateUserByIdErrors, UpdateUserEmailData, UpdateUserEmailResponses, UpdateUserEmailErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Health check
 * Check API health status
 */
export const getHealthStatus = <ThrowOnError extends boolean = false>(options?: Options<GetHealthStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHealthStatusResponses, GetHealthStatusErrors, ThrowOnError>({
        url: '/v1/health',
        ...options
    });
};

/**
 * User login
 * Authenticate a user with email/username and password.
 * Returns JWT tokens for subsequent API calls.
 *
 */
export const authenticateUser = <ThrowOnError extends boolean = false>(options: Options<AuthenticateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AuthenticateUserResponses, AuthenticateUserErrors, ThrowOnError>({
        url: '/v1/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Register new user
 * Create a new user account
 */
export const registerUser = <ThrowOnError extends boolean = false>(options: Options<RegisterUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RegisterUserResponses, RegisterUserErrors, ThrowOnError>({
        url: '/v1/auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Refresh tokens
 * Refresh access token using refresh token.
 * Returns new JWT tokens.
 *
 */
export const refreshTokens = <ThrowOnError extends boolean = false>(options: Options<RefreshTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokensResponses, RefreshTokensErrors, ThrowOnError>({
        url: '/v1/auth/refresh',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * User logout
 * Logout user and invalidate tokens
 */
export const logoutUser = <ThrowOnError extends boolean = false>(options?: Options<LogoutUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutUserResponses, LogoutUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/auth/logout',
        ...options
    });
};

/**
 * List users
 * Get users based on provided filters, sorting and pagination parameters.
 */
export const getUserList = <ThrowOnError extends boolean = false>(options: Options<GetUserListData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserListResponses, GetUserListErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users',
        ...options
    });
};

/**
 * Create user
 * Create a new user (admin only)
 */
export const createUser = <ThrowOnError extends boolean = false>(options: Options<CreateUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateUserResponses, CreateUserErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete user
 * Delete a specific user
 */
export const deleteUserById = <ThrowOnError extends boolean = false>(options: Options<DeleteUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUserByIdResponses, DeleteUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}',
        ...options
    });
};

/**
 * Get user by ID
 * Retrieve a specific user by their ID
 */
export const getUserById = <ThrowOnError extends boolean = false>(options: Options<GetUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUserByIdResponses, GetUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}',
        ...options
    });
};

/**
 * Update user
 * Update a specific user's information
 */
export const updateUserById = <ThrowOnError extends boolean = false>(options: Options<UpdateUserByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserByIdResponses, UpdateUserByIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Update user email
 * Update user email address (requires password confirmation)
 */
export const updateUserEmail = <ThrowOnError extends boolean = false>(options: Options<UpdateUserEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateUserEmailResponses, UpdateUserEmailErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/v1/users/{userId}/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};