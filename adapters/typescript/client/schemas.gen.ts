// This file is auto-generated by @hey-api/openapi-ts

export const ErrorSchema = {
    type: 'object',
    description: 'Error response payload.',
    required: ['code'],
    properties: {
        code: {
            type: 'string',
            description: `- ERR_ACCESS_DENIED: Access denied. Usually that error can occur when the user is not authorized to perform the operation (e.g. buyer tries to remove admin or buyer tries to add a new user). Mostly theoretical error.
- ERR_ALREADY_EXISTS: The record already exists in the system. Usually that error can occur during adding users, that were already added to the system.
- ERR_ALREADY_VERIFIED: The request was already verified. Usually that error can occur during verification of the code, that was already verified.
- ERR_AUTH_CODE_INVALID: The provided auth code is invalid. Usually that error can occur during verification of the auth code, that is invalid.
- ERR_INSUFFICIENT_FUNDS: Insufficient funds. Usually that error can occur during moving (transferring, withdrawing) funds from the account or card, when the source doesn't have enough of funds.
- ERR_INTERNAL: Internal server error. Usually that error indicates some general internal server error, that has nothing to do with client's data, so it can be used with 500 http code.
- ERR_INVALID_ARG: Invalid argument(s) was (were) provided during the request. Usually that error can occur when one or more arguments (or their combination) were provided in incorrect format or the operation with the given arguments is prohibited (e.g. you can't delete the general account). Usually that error could be eliminated by calling another endpoint in advance, that provides correct values (or options) to call the former endpoint.
- ERR_INVALID_CREDENTIALS: Invalid credentials were provided during the request. Usually that error can occur during providing invalid password and/or email.
- ERR_NOT_FOUND: The resource was not found. Usually that error can occur during requesting the resource, that was already removed and can't be accessed anymore (e.g. requesting deleted transaction/user/account information).
- ERR_WEAK_PASSWORD: Weak password. Usually that error can occur during providing too weak password for sign up or update password processes. That error should not be the case for web clients, since the password weakness is validated on the FE, so if you encountered that error, probably the FE and the BE are not aligned properly with each other.
- ERR_CONTACT_SUPPORT: Some error occurred that needs to be escalated to support. That might signal that liquidity is low.
- ERR_SELF_TRANSFER: It is not allowed to transfer funds from an account to itself.
`,
            enum: ['ERR_ACCESS_DENIED', 'ERR_ALREADY_EXISTS', 'ERR_ALREADY_VERIFIED', 'ERR_AUTH_CODE_INVALID', 'ERR_INSUFFICIENT_FUNDS', 'ERR_INTERNAL', 'ERR_INVALID_ARG', 'ERR_INVALID_CREDENTIALS', 'ERR_NOT_FOUND', 'ERR_WEAK_PASSWORD', 'ERR_CONTACT_SUPPORT', 'ERR_SELF_TRANSFER']
        },
        message: {
            type: 'string',
            description: 'Human-readable error message',
            example: 'The requested resource was not found'
        },
        details: {
            type: 'object',
            description: 'Additional error details',
            additionalProperties: true
        },
        timestamp: {
            type: 'string',
            format: 'date-time',
            description: 'Error occurrence timestamp'
        }
    }
} as const;

export const EmailSchema = {
    type: 'string',
    format: 'email',
    description: 'Email address',
    example: 'user@example.com'
} as const;

export const PasswordSchema = {
    type: 'string',
    format: 'password',
    description: 'Password (minimum 8 characters)',
    minLength: 8,
    example: 'SecurePassword123!'
} as const;

export const AuthRequestPayloadSchema = {
    type: 'object',
    description: 'Request payload for user authentication',
    properties: {
        email: {
            '$ref': '#/components/schemas/Email'
        },
        password: {
            '$ref': '#/components/schemas/Password'
        },
        isRememberMe: {
            type: 'boolean',
            description: 'Extend token expiration',
            default: false
        }
    },
    required: ['email', 'password']
} as const;

export const TokenResponseSchema = {
    type: 'object',
    description: 'Authentication token response',
    properties: {
        accessToken: {
            type: 'string',
            description: 'JWT access token',
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        },
        refreshToken: {
            type: 'string',
            description: 'JWT refresh token',
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        },
        accessTokenExpiresInSeconds: {
            type: 'integer',
            description: 'Access token expiration time in seconds',
            example: 3600
        },
        refreshTokenExpiresInSeconds: {
            type: 'integer',
            description: 'Refresh token expiration time in seconds',
            example: 604800
        }
    },
    required: ['accessToken', 'refreshToken', 'accessTokenExpiresInSeconds', 'refreshTokenExpiresInSeconds']
} as const;

export const IdSchema = {
    type: 'string',
    format: 'uuid',
    description: 'Unique identifier',
    example: '123e4567-e89b-12d3-a456-426614174000'
} as const;

export const NameSchema = {
    type: 'string',
    pattern: '^.{0,50}$',
    description: 'Name (either first name or last name) of the user.',
    example: 'John',
    default: ''
} as const;

export const UserRoleSchema = {
    type: 'string',
    description: 'Profile role.',
    enum: ['ADMIN', 'BUYER', 'TEAM_LEAD'],
    example: 'BUYER'
} as const;

export const UserStatusSchema = {
    type: 'string',
    description: `User status.
- ACTIVE: The user is currently active and operational.
- PENDING: User has been invited but not yet activated by the user.
- FROZEN: The user is inactive and not available for transactions.
- DELETED: The user has been deleted and is no longer active.
`,
    enum: ['ACTIVE', 'PENDING', 'FROZEN', 'DELETED'],
    example: 'ACTIVE'
} as const;

export const AvatarUrlSchema = {
    type: 'string',
    format: 'uri',
    nullable: true,
    description: 'User avatar URL',
    maxLength: 500,
    example: 'https://example.com/avatars/user.jpg'
} as const;

export const UserSchema = {
    type: 'object',
    description: 'User entity representing a system user',
    properties: {
        id: {
            '$ref': '#/components/schemas/Id'
        },
        email: {
            '$ref': '#/components/schemas/Email'
        },
        firstName: {
            '$ref': '#/components/schemas/Name'
        },
        lastName: {
            '$ref': '#/components/schemas/Name'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        },
        status: {
            '$ref': '#/components/schemas/UserStatus'
        },
        avatarUrl: {
            '$ref': '#/components/schemas/AvatarUrl'
        },
        createdAt: {
            type: 'string',
            format: 'date-time',
            description: 'Creation timestamp'
        },
        updatedAt: {
            type: 'string',
            format: 'date-time',
            description: 'Last update timestamp'
        },
        lastLoginAt: {
            type: 'string',
            format: 'date-time',
            nullable: true,
            description: 'Last login timestamp'
        }
    },
    required: ['id', 'email', 'firstName', 'lastName', 'role', 'status', 'createdAt', 'updatedAt']
} as const;

export const RegisterRequestPayloadSchema = {
    type: 'object',
    description: 'Request payload for user registration',
    properties: {
        email: {
            '$ref': '#/components/schemas/Email'
        },
        password: {
            '$ref': '#/components/schemas/Password'
        },
        firstName: {
            '$ref': '#/components/schemas/Name'
        },
        lastName: {
            '$ref': '#/components/schemas/Name'
        }
    },
    required: ['email', 'password', 'firstName', 'lastName']
} as const;

export const AuthTokenRefreshRequestPayloadSchema = {
    type: 'object',
    description: 'Request payload for refreshing authentication tokens',
    properties: {
        refreshToken: {
            type: 'string',
            description: 'JWT refresh token',
            example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
        }
    },
    required: ['refreshToken']
} as const;

export const LimitSchema = {
    type: 'integer',
    description: 'Limit of records count to return.',
    minimum: 1,
    maximum: 100,
    default: 20
} as const;

export const PaginationOffsetSchema = {
    type: 'integer',
    description: 'Offset of records to skip.',
    minimum: 0,
    default: 0
} as const;

export const UserSortFieldSchema = {
    type: 'string',
    description: 'Enum defining the fields by which user can sort the users list.',
    enum: ['FULL_NAME']
} as const;

export const OrderSchema = {
    type: 'string',
    description: 'Enum for sorting order.',
    enum: ['ASC', 'DESC']
} as const;

export const OrderBySchema = {
    type: 'array',
    description: 'Order of sorting (ascending/descending). `sortBy` and `orderBy` arrays have always the same length, and each element or `sortBy` array corresponds to the appropriate element of `orderBy` array.',
    items: {
        '$ref': '#/components/schemas/Order'
    }
} as const;

export const PaginationMetaSchema = {
    type: 'object',
    description: 'Pagination metadata for list responses',
    required: ['limit', 'offset', 'total'],
    properties: {
        limit: {
            type: 'integer',
            minimum: 1,
            maximum: 100,
            description: 'Number of items per page',
            example: 20
        },
        offset: {
            type: 'integer',
            minimum: 0,
            description: 'Offset of records to skip',
            example: 0
        },
        total: {
            type: 'integer',
            minimum: 0,
            description: 'Total number of items',
            example: 150
        }
    }
} as const;

export const UserCreateRequestSchema = {
    type: 'object',
    description: 'Request payload for creating a new user',
    properties: {
        email: {
            '$ref': '#/components/schemas/Email'
        },
        firstName: {
            '$ref': '#/components/schemas/Name'
        },
        lastName: {
            '$ref': '#/components/schemas/Name'
        },
        password: {
            '$ref': '#/components/schemas/Password'
        },
        role: {
            '$ref': '#/components/schemas/UserRole',
            default: 'BUYER'
        },
        status: {
            '$ref': '#/components/schemas/UserStatus',
            default: 'ACTIVE'
        }
    },
    required: ['email', 'firstName', 'lastName', 'password']
} as const;

export const UserUpdateRequestSchema = {
    type: 'object',
    description: 'Request payload for updating user information',
    properties: {
        firstName: {
            '$ref': '#/components/schemas/Name'
        },
        lastName: {
            '$ref': '#/components/schemas/Name'
        },
        role: {
            '$ref': '#/components/schemas/UserRole'
        },
        status: {
            '$ref': '#/components/schemas/UserStatus'
        },
        avatarUrl: {
            '$ref': '#/components/schemas/AvatarUrl'
        }
    }
} as const;

export const UserUpdateEmailRequestSchema = {
    type: 'object',
    description: 'Request payload for updating user email',
    properties: {
        newEmail: {
            '$ref': '#/components/schemas/Email'
        },
        password: {
            '$ref': '#/components/schemas/Password'
        }
    },
    required: ['newEmail', 'password']
} as const;