# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-07-08T17:32:45+00:00

from __future__ import annotations

from collections.abc import Mapping, Sequence
from datetime import datetime
from enum import Enum
from typing import Annotated, Any
from uuid import UUID

from pydantic import (
    AnyUrl,
    BaseModel,
    EmailStr,
    Field,
    RootModel,
    SecretStr,
    StrictBool,
    StrictInt,
    StrictStr,
)


class Code(Enum):
    """
    - ERR_ACCESS_DENIED: Access denied. Usually that error can occur when the user is not authorized to perform the operation (e.g. buyer tries to remove admin or buyer tries to add a new user). Mostly theoretical error.
    - ERR_ALREADY_EXISTS: The record already exists in the system. Usually that error can occur during adding users, that were already added to the system.
    - ERR_ALREADY_VERIFIED: The request was already verified. Usually that error can occur during verification of the code, that was already verified.
    - ERR_AUTH_CODE_INVALID: The provided auth code is invalid. Usually that error can occur during verification of the auth code, that is invalid.
    - ERR_INSUFFICIENT_FUNDS: Insufficient funds. Usually that error can occur during moving (transferring, withdrawing) funds from the account or card, when the source doesn't have enough of funds.
    - ERR_INTERNAL: Internal server error. Usually that error indicates some general internal server error, that has nothing to do with client's data, so it can be used with 500 http code.
    - ERR_INVALID_ARG: Invalid argument(s) was (were) provided during the request. Usually that error can occur when one or more arguments (or their combination) were provided in incorrect format or the operation with the given arguments is prohibited (e.g. you can't delete the general account). Usually that error could be eliminated by calling another endpoint in advance, that provides correct values (or options) to call the former endpoint.
    - ERR_INVALID_CREDENTIALS: Invalid credentials were provided during the request. Usually that error can occur during providing invalid password and/or email.
    - ERR_NOT_FOUND: The resource was not found. Usually that error can occur during requesting the resource, that was already removed and can't be accessed anymore (e.g. requesting deleted transaction/user/account information).
    - ERR_WEAK_PASSWORD: Weak password. Usually that error can occur during providing too weak password for sign up or update password processes. That error should not be the case for web clients, since the password weakness is validated on the FE, so if you encountered that error, probably the FE and the BE are not aligned properly with each other.
    - ERR_CONTACT_SUPPORT: Some error occurred that needs to be escalated to support. That might signal that liquidity is low.
    - ERR_SELF_TRANSFER: It is not allowed to transfer funds from an account to itself.

    """

    err_access_denied = 'ERR_ACCESS_DENIED'
    err_already_exists = 'ERR_ALREADY_EXISTS'
    err_already_verified = 'ERR_ALREADY_VERIFIED'
    err_auth_code_invalid = 'ERR_AUTH_CODE_INVALID'
    err_insufficient_funds = 'ERR_INSUFFICIENT_FUNDS'
    err_internal = 'ERR_INTERNAL'
    err_invalid_arg = 'ERR_INVALID_ARG'
    err_invalid_credentials = 'ERR_INVALID_CREDENTIALS'
    err_not_found = 'ERR_NOT_FOUND'
    err_weak_password = 'ERR_WEAK_PASSWORD'
    err_contact_support = 'ERR_CONTACT_SUPPORT'
    err_self_transfer = 'ERR_SELF_TRANSFER'


class Error(BaseModel):
    """
    Error response payload.
    """

    code: Code
    """
    - ERR_ACCESS_DENIED: Access denied. Usually that error can occur when the user is not authorized to perform the operation (e.g. buyer tries to remove admin or buyer tries to add a new user). Mostly theoretical error.
    - ERR_ALREADY_EXISTS: The record already exists in the system. Usually that error can occur during adding users, that were already added to the system.
    - ERR_ALREADY_VERIFIED: The request was already verified. Usually that error can occur during verification of the code, that was already verified.
    - ERR_AUTH_CODE_INVALID: The provided auth code is invalid. Usually that error can occur during verification of the auth code, that is invalid.
    - ERR_INSUFFICIENT_FUNDS: Insufficient funds. Usually that error can occur during moving (transferring, withdrawing) funds from the account or card, when the source doesn't have enough of funds.
    - ERR_INTERNAL: Internal server error. Usually that error indicates some general internal server error, that has nothing to do with client's data, so it can be used with 500 http code.
    - ERR_INVALID_ARG: Invalid argument(s) was (were) provided during the request. Usually that error can occur when one or more arguments (or their combination) were provided in incorrect format or the operation with the given arguments is prohibited (e.g. you can't delete the general account). Usually that error could be eliminated by calling another endpoint in advance, that provides correct values (or options) to call the former endpoint.
    - ERR_INVALID_CREDENTIALS: Invalid credentials were provided during the request. Usually that error can occur during providing invalid password and/or email.
    - ERR_NOT_FOUND: The resource was not found. Usually that error can occur during requesting the resource, that was already removed and can't be accessed anymore (e.g. requesting deleted transaction/user/account information).
    - ERR_WEAK_PASSWORD: Weak password. Usually that error can occur during providing too weak password for sign up or update password processes. That error should not be the case for web clients, since the password weakness is validated on the FE, so if you encountered that error, probably the FE and the BE are not aligned properly with each other.
    - ERR_CONTACT_SUPPORT: Some error occurred that needs to be escalated to support. That might signal that liquidity is low.
    - ERR_SELF_TRANSFER: It is not allowed to transfer funds from an account to itself.

    """
    message: Annotated[
        StrictStr | None, Field(examples=['The requested resource was not found'])
    ] = None
    """
    Human-readable error message
    """
    details: Mapping[str, Any] | None = None
    """
    Additional error details
    """
    timestamp: datetime | None = None
    """
    Error occurrence timestamp
    """


class Email(RootModel[EmailStr]):
    root: Annotated[EmailStr, Field(examples=['user@example.com'])]
    """
    Email address
    """


class Password(RootModel[SecretStr]):
    root: Annotated[SecretStr, Field(examples=['SecurePassword123!'], min_length=8)]
    """
    Password (minimum 8 characters)
    """


class AuthRequestPayload(BaseModel):
    """
    Request payload for user authentication
    """

    email: Email
    password: Password
    is_remember_me: Annotated[StrictBool | None, Field(alias='isRememberMe')] = False
    """
    Extend token expiration
    """


class TokenResponse(BaseModel):
    """
    Authentication token response
    """

    access_token: Annotated[
        StrictStr,
        Field(
            alias='accessToken', examples=['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...']
        ),
    ]
    """
    JWT access token
    """
    refresh_token: Annotated[
        StrictStr,
        Field(
            alias='refreshToken', examples=['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...']
        ),
    ]
    """
    JWT refresh token
    """
    access_token_expires_in_seconds: Annotated[
        StrictInt, Field(alias='accessTokenExpiresInSeconds', examples=[3600])
    ]
    """
    Access token expiration time in seconds
    """
    refresh_token_expires_in_seconds: Annotated[
        StrictInt, Field(alias='refreshTokenExpiresInSeconds', examples=[604800])
    ]
    """
    Refresh token expiration time in seconds
    """


class Id(RootModel[UUID]):
    root: Annotated[UUID, Field(examples=['123e4567-e89b-12d3-a456-426614174000'])]
    """
    Unique identifier
    """


class Name(RootModel[StrictStr]):
    root: Annotated[StrictStr, Field(examples=['John'])]
    """
    Name (either first name or last name) of the user.
    """


class UserRole(Enum):
    """
    Profile role.
    """

    admin = 'ADMIN'
    buyer = 'BUYER'
    team_lead = 'TEAM_LEAD'


class UserStatus(Enum):
    """
    User status.
    - ACTIVE: The user is currently active and operational.
    - PENDING: User has been invited but not yet activated by the user.
    - FROZEN: The user is inactive and not available for transactions.
    - DELETED: The user has been deleted and is no longer active.

    """

    active = 'ACTIVE'
    pending = 'PENDING'
    frozen = 'FROZEN'
    deleted = 'DELETED'


class AvatarUrl(RootModel[AnyUrl | None]):
    root: Annotated[
        AnyUrl | None, Field(examples=['https://example.com/avatars/user.jpg'])
    ] = None
    """
    User avatar URL
    """


class User(BaseModel):
    """
    User entity representing a system user
    """

    id: Id
    email: Email
    first_name: Annotated[Name, Field(alias='firstName')]
    last_name: Annotated[Name, Field(alias='lastName')]
    role: UserRole
    status: UserStatus
    avatar_url: Annotated[AvatarUrl | None, Field(alias='avatarUrl')] = None
    created_at: Annotated[datetime, Field(alias='createdAt')]
    """
    Creation timestamp
    """
    updated_at: Annotated[datetime, Field(alias='updatedAt')]
    """
    Last update timestamp
    """
    last_login_at: Annotated[datetime | None, Field(alias='lastLoginAt')] = None
    """
    Last login timestamp
    """


class RegisterRequestPayload(BaseModel):
    """
    Request payload for user registration
    """

    email: Email
    password: Password
    first_name: Annotated[Name, Field(alias='firstName')]
    last_name: Annotated[Name, Field(alias='lastName')]


class AuthTokenRefreshRequestPayload(BaseModel):
    """
    Request payload for refreshing authentication tokens
    """

    refresh_token: Annotated[
        StrictStr,
        Field(
            alias='refreshToken', examples=['eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...']
        ),
    ]
    """
    JWT refresh token
    """


class Limit(RootModel[StrictInt]):
    root: StrictInt
    """
    Limit of records count to return.
    """


class PaginationOffset(RootModel[StrictInt]):
    root: StrictInt
    """
    Offset of records to skip.
    """


class UserSortField(Enum):
    """
    Enum defining the fields by which user can sort the users list.
    """

    full_name = 'FULL_NAME'


class Order(Enum):
    """
    Enum for sorting order.
    """

    asc = 'ASC'
    desc = 'DESC'


class OrderBy(RootModel[Sequence[Order]]):
    """
    Order of sorting (ascending/descending). `sortBy` and `orderBy` arrays have always the same length, and each element or `sortBy` array corresponds to the appropriate element of `orderBy` array.
    """

    root: Sequence[Order]
    """
    Order of sorting (ascending/descending). `sortBy` and `orderBy` arrays have always the same length, and each element or `sortBy` array corresponds to the appropriate element of `orderBy` array.
    """


class PaginationMeta(BaseModel):
    """
    Pagination metadata for list responses
    """

    limit: Annotated[StrictInt, Field(examples=[20])]
    """
    Number of items per page
    """
    offset: Annotated[StrictInt, Field(examples=[0])]
    """
    Offset of records to skip
    """
    total: Annotated[StrictInt, Field(examples=[150])]
    """
    Total number of items
    """


class UserCreateRequest(BaseModel):
    """
    Request payload for creating a new user
    """

    email: Email
    first_name: Annotated[Name, Field(alias='firstName')]
    last_name: Annotated[Name, Field(alias='lastName')]
    password: Password
    role: UserRole | None = 'BUYER'
    status: UserStatus | None = 'ACTIVE'


class UserUpdateRequest(BaseModel):
    """
    Request payload for updating user information
    """

    first_name: Annotated[Name | None, Field(alias='firstName')] = ''
    last_name: Annotated[Name | None, Field(alias='lastName')] = ''
    role: UserRole | None = None
    status: UserStatus | None = None
    avatar_url: Annotated[AvatarUrl | None, Field(alias='avatarUrl')] = None


class UserUpdateEmailRequest(BaseModel):
    """
    Request payload for updating user email
    """

    new_email: Annotated[Email, Field(alias='newEmail')]
    password: Password
